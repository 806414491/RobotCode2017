// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc199.Robot2017.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc199.Robot2017.Robot;

/**
 *
 */
public class ManualControlMechs extends Command {
	public ManualControlMechs() {
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	String system = SmartDashboard.getString("Manual Control Mech");
    	switch (system.toLowerCase()){
	    	case "Intake": Robot.intake.runIntake(Robot.oi.manipulator.getThrottle());
	    		break;
	    	case "Feeder": Robot.shooter.feeder(Robot.oi.manipulator.getThrottle());
	    		break;
	    	case "Climber": Robot.climber.runClimber(Robot.oi.manipulator.getThrottle());
	    		break;
	    	case "Shooter": Robot.shooter.shoot(Robot.oi.manipulator.getThrottle());
	    		break;
	    	case "Turret": Robot.shooter.turret(Robot.oi.manipulator.getThrottle());
	    		break;
	    	case "Hood": Robot.shooter.adjustHood(Robot.oi.manipulator.getThrottle());
	    		break;
    	}
    }

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		String system = SmartDashboard.getString("Manual Control Mech");
    	switch (system.toLowerCase()){
	    	case "Intake": Robot.intake.runIntake(0);
	    		break;
	    	case "Feeder": Robot.shooter.feeder(0);
	    		break;
	    	case "Climber": Robot.climber.runClimber(0);
	    		break;
	    	case "Shooter": Robot.shooter.shoot(0);
	    		break;
    	}
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
