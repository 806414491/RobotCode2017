// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc199.Robot2017.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc199.Robot2017.Robot;
import org.usfirst.frc199.Robot2017.RobotMap;

/**
 * 
 */
public class AutoShoot extends Command {
	double target;
	Timer tim = new Timer();
	double duration;

	/**
	 * Figures out speed at which to run motors (with static hood) for provided
	 * distance to boiler. Uses ShooterPID to run motor at that speed for given
	 * duration. Runs feeder motors while the shooter motor is with in 5% of the
	 * target speed.
	 * 
	 * @param targetDistance
	 *            - distance to the boiler
	 * @param runTime
	 *            - duration to run the shooter motor
	 */
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public AutoShoot(double targetDistance, double runTime) {
		target = Robot.shooter.convertDistanceToTargetSpeed(targetDistance);
		duration = runTime;
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		tim.start();
		Robot.shooter.setPIDTarget(target);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		Robot.shooter.updatePID(RobotMap.shooterShootEncoder.getRate());
		if (!Robot.shooter.shooterMotorStalled()) {
			Robot.shooter.runShootMotor(Robot.shooter.getPIDOutput());
		}
		if (Math.abs(RobotMap.shooterShootEncoder.getRate() - target) <= Robot.getPref("speedErrorConstant", .05)
				* target) {
			Robot.shooter.runFeederMotor(1);
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return (tim.get() >= duration);
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.shooter.runShootMotor(0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
