// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc199.Robot2017.subsystems;

import org.usfirst.frc199.Robot2017.Robot;
import org.usfirst.frc199.Robot2017.PID;
import org.usfirst.frc199.Robot2017.DashboardInterface;
import org.usfirst.frc199.Robot2017.RobotMap;
import org.usfirst.frc199.Robot2017.commands.*;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 * @author kevin
 * @version 0.0.001
 */
public class Drivetrain extends Subsystem implements DashboardInterface {

	private final SpeedController leftMotor = RobotMap.drivetrainLeftMotor;
	private final SpeedController rightMotor = RobotMap.drivetrainRightMotor;
	private final RobotDrive robotDrive = RobotMap.drivetrainRobotDrive;
	private final Encoder leftEncoder = RobotMap.drivetrainLeftEncoder;
	private final Encoder rightEncoder = RobotMap.drivetrainRightEncoder;
	// private final AnalogGyro gyro = RobotMap.drivetrainGyro;
	private final DigitalInput gearLiftedSwitch = RobotMap.gearLiftedLimitSwitch;

	private final Compressor compressor = RobotMap.drivetrainCompressor;
	private final DoubleSolenoid leftShiftPiston = RobotMap.drivetrainLeftShiftPiston;
	private final DoubleSolenoid rightShiftPiston = RobotMap.drivetrainRightShiftPiston;

	private final AHRS gyro = RobotMap.ahrs;
	
	private final PowerDistributionPanel pdp = RobotMap.pdp;

	public boolean isInArcadeDrive = true;
	private double currentSpeed = 0; // only used and changed in Arcade Drive
	private double currentTurn = 0;

	public PID drivePID = new PID("drivePID");
	public PID turnPID = new PID("turnPID");

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	/**
	 * this method initializes the command used in teleop
	 */
	public void initDefaultCommand() {

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
		setDefaultCommand(new TeleopDrive());

	}

	
	/**
	 * resets the encoders so that a program can test distance
	 */
	public void resetEncoder() {
		leftEncoder.reset();
		rightEncoder.reset();
	}

	/**
	 * resets the gyro so that a program can test turn angle
	 */
	public void resetGyro() {
		gyro.reset();
	}

	/**
	 * @return the angle that the robot turned relative to the gyro's last reset
	 */
	public double getAngle() {
		return gyro.getAngle();
	}

	/**
	 * @return the distance that the robot moved relative to the encoders' last reset
	 */
	public double getDistance() {
		return (leftEncoder.get() + rightEncoder.get()) / 2;
	}

	/**
	 * @return the average speed of the two sides of the robot at the current time
	 */
	public double getSpeed() {
		return (leftEncoder.getRate() + rightEncoder.getRate()) / 2;
	}

	/**
	 * forces the robot's turn and move speed to change at a max of 5% each iteration
	 */
	public void gradualDrive() {
		if (isInArcadeDrive) {
			currentSpeed += Math.signum(Robot.oi.rightJoy.getY() - currentSpeed) * 0.05;
			currentTurn += Math.signum(Robot.oi.leftJoy.getX() - currentTurn) * 0.05;
			robotDrive.arcadeDrive(currentTurn, currentSpeed);
		} else {
			robotDrive.tankDrive(leftMotor.get() + Math.signum(Robot.oi.leftJoy.getY() - leftMotor.get()) * 0.05,
					rightMotor.get() + Math.signum(Robot.oi.rightJoy.getY() - rightMotor.get()) * 0.05);
		}
	}

	/**
	 * just drives the robot normally, nothing to see here, move on.
	 */
	public void drive() {
		if (isInArcadeDrive) {
			currentSpeed = Robot.oi.rightJoy.getY();
			currentTurn = Robot.oi.leftJoy.getX();
			robotDrive.arcadeDrive(currentTurn, currentSpeed);
		} else {
			robotDrive.tankDrive(Robot.oi.leftJoy.getY(), Robot.oi.rightJoy.getY());
		}
	}

	/**
	 * for autonomous period, drives to angle given and then to distance given.
	 */
	public void autoDrive() {
		drivePID.update(getDistance());
		turnPID.update(getAngle());
		if (!turnPID.reachedTarget()) {
			robotDrive.arcadeDrive(0, turnPID.getOutput());
		} else {
			robotDrive.arcadeDrive(drivePID.getOutput(), 0);
		}
	}

	/**
	 * just stops the robot. Usually called after a program finishes.
	 */
	public void stopDrive() {
		robotDrive.arcadeDrive(0, 0);
	}

	@Override
	public void displayData() {
		// TODO (Ana T.) Display all data that may be useful to us
		putBoolean("high gear", false);
	}
	
	/**
	 * shifts gears
	 * */
	public void shiftGears(){
		if(leftShiftPiston.get().toString().equals("kForward")){
			//shift to low gear
			leftShiftPiston.set(DoubleSolenoid.Value.kReverse);
			rightShiftPiston.set(DoubleSolenoid.Value.kReverse);
		}
		else{
			//shift to high gear
			leftShiftPiston.set(DoubleSolenoid.Value.kForward);
			rightShiftPiston.set(DoubleSolenoid.Value.kForward);
		}
	}
	
	/**
	 * @return should the robot shift to low gear or not
	 * */
	public boolean currentControl(){
		int channel = (int)(Robot.getPref("drivetrain channel", 0));
		double current = pdp.getCurrent(channel);
		if(current >= 110)
			return true;
		return false;
	}
}
