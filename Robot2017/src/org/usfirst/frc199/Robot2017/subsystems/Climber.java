// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc199.Robot2017.subsystems;

import org.usfirst.frc199.Robot2017.DashboardInterface;
import org.usfirst.frc199.Robot2017.RobotMap;
import org.usfirst.frc199.Robot2017.commands.*;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Climber extends Subsystem implements DashboardInterface {

	private final SpeedController winchMotor = RobotMap.climberWinchMotor;
	private final AnalogInput plateLimit = RobotMap.climberPlateIRSensor;
	private final Encoder winchEncoder = RobotMap.winchEncoder;
	public boolean AIEnabled = false;

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	/**
	 * This method uses the winch to let the robot climb
	 * 
	 * @param speed
	 *            - the speed that you want the winch to run on -1 -> 1
	 */
	public void runClimber(double speed) {
		winchMotor.set(speed);
	}

	/**
	 * This method returns whether the plate is sensing being touched
	 * 
	 * @return
	 */
	public boolean returnPlate() {
		if (((plateLimit.getVoltage() > 1234 && plateLimit.getVoltage() < 1234)
				|| (plateLimit.getVoltage() > 1111 && plateLimit.getVoltage() < 1111)) 
				&& AIEnabled) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * This method stops the winch
	 */
	public void stopWinch() {
		winchMotor.set(0);
	}
	public void encoderReset() {
		winchEncoder.reset();
	}
	public double getEncoder() {
		//TODO: anyone, set distance per pulse to inches per pulse
		return winchEncoder.getDistance();
	}

	@Override
	/**
	 * This method displays data to SmartDashboard
	 */
	public void displayData() {
//		SmartDashboard.putBoolean("plateLimit", plateLimit.get());
	}
}
