// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc199.Robot2017.subsystems;

import org.usfirst.frc199.Robot2017.DashboardInterface;
import org.usfirst.frc199.Robot2017.PID;
import org.usfirst.frc199.Robot2017.Robot;
import org.usfirst.frc199.Robot2017.RobotMap;
import org.usfirst.frc199.Robot2017.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Shooter extends Subsystem implements DashboardInterface {
	double shootingAngle = Robot.getPref("shootingAngle", 0);
	double height = Robot.getPref("relativeHeightOfBoiler", 0);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final SpeedController shootMotor = RobotMap.shooterShootMotor;
	private final SpeedController feedMotor = RobotMap.shooterFeedMotor;
	private final Encoder shootEncoder = RobotMap.shooterShootEncoder;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	private PID ShooterPID = new PID("ShooterPID");

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	/**
	 * Sets the shooter motor's speed (from -1.0 to 1.0).
	 * 
	 * @param rate - speed to give the shooter motor
	 */
	public void shoot(double rate) {
		RobotMap.shooterShootMotor.set(rate);
	}

	/**
	 * Sets the feeder motor's speed (from -1.0 to 1.0).
	 * 
	 * @param rate - speed to give the feeder motor
	 */
	public void feeder(double rate) {
		RobotMap.shooterFeedMotor.set(rate);
	}

	/**
	 * Tells the shooter motor's PID the target speed to reach.
	 * 
	 * @param targetRate - target speed for shooter motor PID
	 */
	public void setPIDTarget(double targetRate) {
		ShooterPID.setTarget(targetRate);
	}

	/**
	 * Updates the shooter motor PID with the current speed from the encoder.
	 * 
	 * @param updateValuecurrent shooter motor encoder speed
	 */
	public void updatePID(double updateValue) {
		ShooterPID.update(updateValue);
	}

	/**
	 * Gets the speed for the shooter motor from the shooter PID.
	 * 
	 * @return speed for motor
	 */
	public double getPIDOutput() {
		return ShooterPID.getOutput();
	}

	/**
	 * Passes the distance of the robot from the boiler through an equation to
	 * compute the speed at which we should be shooting.
	 * 
	 * @param distance - in inches of the front of the robot from the boiler
	 * @return the ideal exit speed of the ball in inches/second
	 */
	public double convertDistanceToTargetSpeed(double distance) {
		return (distance / Math.cos(shootingAngle)
				* (Math.sqrt(386.09 / 2 * (distance * Math.tan(shootingAngle)) + height)));
	}

	@Override
	public void displayData() {
		// TODO Auto-generated method stub

	}
}
